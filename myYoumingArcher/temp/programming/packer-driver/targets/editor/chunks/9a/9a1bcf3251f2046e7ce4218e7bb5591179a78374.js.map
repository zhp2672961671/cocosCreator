{"version":3,"sources":["file:///E:/myCocosGame/cocosCreator/myYoumingArcher/assets/script/framework/localConfig.ts"],"names":["_decorator","resources","CSVManager","ResourceUtil","ccclass","property","LocalConfig","_csvManager","_callback","Function","_currentLoad","_cntLoad","instance","_instance","loadConfig","cb","_loadCSV","loadDir","err","assets","arrCsvFiles","filter","item","_native","length","forEach","index","array","getTextData","name","content","addTable","_tryToCallbackOnFinished","queryOne","tableName","key","value","queryByID","ID","getTable","getTableArr","queryAll","queryIn","values","queryByCondition","condition"],"mappings":"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","sourcesContent":["import { _decorator, resources } from \"cc\";\nimport { CSVManager } from \"./csvManager\";\nimport { ResourceUtil } from \"./resourceUtil\";\nconst { ccclass, property } = _decorator;\n\n@ccclass(\"LocalConfig\")\nexport class LocalConfig {\n    /* class member could be defined like this */\n    private static _instance: LocalConfig;\n    private _csvManager: CSVManager = new CSVManager();\n\n    static get instance () {\n        if (this._instance) {\n            return this._instance;\n        }\n\n        this._instance = new LocalConfig();\n        return this._instance;\n    }\n\n    private _callback: Function = new Function();\n    private _currentLoad: number = 0;\n    private _cntLoad: number = 0;\n\n    /**\n     * 加载配置文件\n     * @param {Function}cb 回调函数\n     */\n    public loadConfig (cb: Function) {\n        this._callback = cb;\n        this._loadCSV();\n    }\n\n    private _loadCSV () {\n        //新增数据表 请往该数组中添加....\n        resources.loadDir(\"datas\", (err: any, assets)=>{\n            if (err) {\n                return;\n            }\n\n            let arrCsvFiles = assets.filter((item: any)=>{\n                // _native用于本机资产的可序列化URL。供内部使用。\n                return item._native !== \".md\";\n            })\n\n            this._cntLoad = arrCsvFiles.length;\n\n            //客户端加载\n            if (arrCsvFiles.length) {\n                arrCsvFiles.forEach((item, index, array)=> {\n                    //加载文本资源\n                    ResourceUtil.getTextData(item.name, (err: any, content: any) => {\n                        this._csvManager.addTable(item.name, content);\n                        this._tryToCallbackOnFinished();\n                    });\n                });\n            } else {\n                this._tryToCallbackOnFinished();\n            }\n        })\n    }\n\n    /**\n     * 查询一条表内容\n     * @param {string} tableName 表名\n     * @param {string} key 列名\n     * @param {any} value 值\n     * @returns {Object} 一条表内容\n     */\n    queryOne (tableName: string, key: string, value: any) {\n        return this._csvManager.queryOne(tableName, key, value);\n    }\n\n    /**\n     * 根据ID查询一条表内容\n     * @param {string}tableName 表名\n     * @param {string}ID\n     * @returns {Object} 一条表内容\n     */\n    queryByID (tableName: string, ID: string) {\n        return this._csvManager.queryByID(tableName, ID);\n    }\n\n    /**\n     * 根据表名获取表的所有内容\n     * @param {string} tableName  表名\n     * @returns {object} 表内容\n     */\n    getTable (tableName: string) {\n        return this._csvManager.getTable(tableName);\n    }\n\n    /**\n     * 根据表名获取表的所有内容\n     * @param {string} tableName  表名\n     * @returns {object} 表内容\n     */\n    getTableArr (tableName: string) {\n        return this._csvManager.getTableArr(tableName);\n    }\n\n    /**\n     * 查询key和value对应的所有行内容\n     * @param {string} tableName 表名\n     * @param {string} key 列名\n     * @param {any} value 值\n     * @returns {Object}\n     */\n    queryAll (tableName: string, key: string, value: any) {\n        return this._csvManager.queryAll(tableName, key, value);\n    }\n\n    //\n    /**\n     * 选出指定表里所有 key 的值在 values 数组中的数据，返回 Object，key 为 ID\n     * @param {string} tableName 表名\n     * @param {string} key  列名\n     * @param {Array}values 数值\n     * @returns\n     */\n    queryIn (tableName: string, key: string, values: any[]) {\n        return this._csvManager.queryIn(tableName, key, values);\n    }\n\n    /**\n     * 选出符合条件的数据。condition key 为表格的key，value 为值的数组。返回的object，key 为数据在表格的ID，value为具体数据\n     * @param {string} tableName 表名\n     * @param {any} condition 筛选条件\n     * @returns\n     */\n    queryByCondition (tableName: string, condition: any) {\n        return this._csvManager.queryByCondition(tableName, condition);\n    }\n\n    private _tryToCallbackOnFinished () {\n        if (this._callback) {\n            this._currentLoad++;\n            if (this._currentLoad >= this._cntLoad) {\n                this._callback();\n            }\n        }\n    }\n}\n"]}